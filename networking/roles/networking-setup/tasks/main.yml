---
- name: Create VPC for Jenkins
  ec2_vpc_net:
    state: present
    region: "{{ aws_region }}"
    name: "{{ vpc_name }}"
    cidr_block: "{{ vpc_cidr }}"
    dns_hostnames: yes
    dns_support: yes
    multi_ok: no
    tenancy: default
    profile: "{{ aws_profile }}"
    tags:
      Name: "jenkins"
  register: jenkins_vpc

- name: Create Internet Gateway
  ec2_vpc_igw:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    tags:
      Name: "jenkins"
  register: jenkins_igw

- name: Create subnets
  ec2_vpc_subnet:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    az: "{{ item.value.az }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    cidr: "{{ item.value.cidr }}"
    tags:
      Name: "jenkins_{{ item.value.az }}"
  with_dict: "{{ vpc_subnets }}"
  register: jenkins_vpc_subnets

# # Create and Accept a cross account peering connection.
# - name: Create VPC peering from Jenkins VPC to K8S cluster VPC
#   ec2_vpc_peer:
#     profile: "{{ aws_profile }}"
#     region: "{{ aws_region }}"
#     vpc_id: "{{ jenkins_vpc.vpc.id }}"
#     peer_vpc_id: "{{ cluster_vpc_id }}"
#     peer_owner_id: "{{ cluster_account_id }}"
#     state: present
#     tags:
#       Name: jenkins_vpc_peer_to_cluster_vpc
#   register: vpc_peer

# - name: Accept a K8S cluster VPC peering connection request
#   ec2_vpc_peer:
#     region: "{{ aws_region }}"
#     peering_id: "{{ vpc_peer.peering_id }}"
#     profile: "{{ cluster_vpc_aws_profile }}"
#     state: accept
#     tags:
#       Name: jenkins_vpc_peer_to_cluster_vpc

- name: Grab the route table for Jenkins VPC
  ec2_vpc_route_table_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ jenkins_vpc.vpc.id }}"
  register: jenkins_route_table

- name: Update the route table in the Jenkins vpc
  ec2_vpc_route_table:
    state: present
    lookup: id
    route_table_id: "{{ jenkins_route_table.route_tables[0].id }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    tags:
      Name: "jenkins_route_table_{{ jenkins_vpc.vpc.id }}"
    subnets:
      - "{{ jenkins_vpc_subnets.results[0].subnet.id }}"
      - "{{ jenkins_vpc_subnets.results[1].subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ jenkins_igw.gateway_id }}"
      # - dest: "{{ cluster_vpc_cidr }}"
      #   gateway_id: "{{ vpc_peer.peering_id }}"
  register: jenkins_route_table_updated



# - name: Grab the route table for Cluster VPC
#   ec2_vpc_route_table_info:
#     profile: "{{ cluster_vpc_aws_profile }}"
#     region: "{{ aws_region }}"
#     filters:
#       route-table-id: "{{ cluster_route_table_id }}"
#   register: cluster_route_table

# - name: Update the route table in the Cluster vpc
#   ec2_vpc_route_table:
#     state: present
#     lookup: id
#     route_table_id: "{{ cluster_route_table.route_tables[0].id }}"
#     vpc_id: "{{ cluster_vpc_id }}"
#     profile: "{{ cluster_vpc_aws_profile }}"
#     region: "{{ aws_region }}"
#     purge_routes: false
#     purge_subnets: false
#     routes:
#       - dest: "{{ vpc_cidr }}"
#         gateway_id: "{{ vpc_peer.peering_id }}"
#   register: cluster_route_table_updated


- name: "Create vpc security groups"
  ec2_group:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ jenkins_vpc.vpc.id }}"
    name: "jenkins_sg_{{ jenkins_vpc.vpc.id }}"
    description: "jenkins security group for {{ jenkins_vpc.vpc.id }}"
    rules:
      - proto: tcp
        ports:
        - 80
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 80
      - proto: tcp
        ports:
        - 8080
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 8080
      - proto: tcp
        ports:
        - 443
        cidr_ip: 0.0.0.0/0
        rule_desc: allow all on port 443
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
  register: jenkins_sg

- name: Create EC2 instances
  ec2_instance:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    network:
      assign_public_ip: true
    image_id: "{{ ec2_image }}"
    instance_type: "{{ ec2_instance_type }}"
    key_name: "{{ ec2_keypair }}"
    vpc_subnet_id: "{{ jenkins_vpc_subnets.results[0].subnet.id }}"
    wait: yes
    security_group: "{{ jenkins_sg.group_id }}"
    exact_count: 1
    tags:
      Name: "jenkins-{{ jenkins_vpc_subnets.results[0].subnet.availability_zone }}"
      app: "jenkins"
  register: jenkins_ec2_instance

- name: Pause for 2 minutes for ec2 instance to come up
  pause:
    minutes: 2

# - name: Wait for SSH to come up
#   wait_for: 
#     host: "{{ item.public_dns_name }}" 
#     port: 22 
#     delay: 60 
#     timeout: 320
#     state: started
#   with_items: "{{ jenkins_ec2_instance.instances }}"

- name: "Gather EC2 instance facts"
  ec2_instance_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      "tag:app": "jenkins"
      "instance-state-name": "running"
  register: jenkins_ec2_running_instances

- name: Collect Jenkins EIP
  ec2_eip_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      "{{ {'tag:Name': eip_name} }}"
  register: my_eip

- name: Associate an elastic IP
  ec2_eip:
    state: present
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    device_id: "{{ jenkins_ec2_running_instances.instances[0].instance_id }}"
    ip: "{{ my_eip.addresses[0].public_ip }}"

- name: Update the sub-domain with associated Elastic IP in route53
  route53:
    state: present
    profile: "{{ aws_profile }}"
    type: A
    overwrite: yes
    value: "{{ my_eip.addresses[0].public_ip }}"
    wait: yes
    zone: "{{ sub_domain }}"
    record: "{{ sub_domain }}"
    ttl: 60

- name: "Wait for ssh"
  wait_for:
    port: 22
    host: "{{ my_eip.addresses[0].public_ip }}"
    delay: 60
    state: started
